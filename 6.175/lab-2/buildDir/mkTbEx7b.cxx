/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Sun Jan 28 14:02:40 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx7b.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx7b::MOD_mkTbEx7b(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dut_busy(simHdl, "dut_busy", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_i(simHdl, "dut_i", this, 5u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_m_neg(simHdl, "dut_m_neg", this, 33u, 0llu, (tUInt8)0u),
    INST_dut_m_pos(simHdl, "dut_m_pos", this, 33u, 0llu, (tUInt8)0u),
    INST_dut_p(simHdl, "dut_p", this, 33u, 0llu, (tUInt8)0u),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 32u, 4u, (tUInt8)1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 16u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 16u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 16u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 16u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1147(2863311530u),
    DEF_v__h770(2863311530u)
{
  symbol_count = 46u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx7b::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h196", SYM_DEF, &DEF__read__h196, 5u);
  init_symbol(&symbols[1u],
	      "CAN_FIRE_RL_dut_booth_step",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_dut_booth_step,
	      1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[8u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[9u], "dut_busy", SYM_MODULE, &INST_dut_busy);
  init_symbol(&symbols[10u], "dut_i", SYM_MODULE, &INST_dut_i);
  init_symbol(&symbols[11u], "dut_m_neg", SYM_MODULE, &INST_dut_m_neg);
  init_symbol(&symbols[12u], "dut_m_pos", SYM_MODULE, &INST_dut_m_pos);
  init_symbol(&symbols[13u], "dut_p", SYM_MODULE, &INST_dut_p);
  init_symbol(&symbols[14u], "RL_dut_booth_step", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[16u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[17u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[18u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[19u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[20u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[21u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[22u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[23u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[24u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[25u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[26u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[27u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[28u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[29u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[30u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[31u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[32u], "v__h1220", SYM_DEF, &DEF_v__h1220, 16u);
  init_symbol(&symbols[33u], "v__h844", SYM_DEF, &DEF_v__h844, 16u);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_dut_booth_step",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_booth_step,
	      1u);
  init_symbol(&symbols[35u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[41u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[42u], "x__h1629", SYM_DEF, &DEF_x__h1629, 32u);
  init_symbol(&symbols[43u], "x__h2166", SYM_DEF, &DEF_x__h2166, 32u);
  init_symbol(&symbols[44u], "x_wget__h1090", SYM_DEF, &DEF_x_wget__h1090, 16u);
  init_symbol(&symbols[45u], "x_wget__h713", SYM_DEF, &DEF_x_wget__h713, 16u);
}


/* Rule actions */

void MOD_mkTbEx7b::RL_dut_booth_step()
{
  tUInt8 DEF_x__h300;
  tUInt64 DEF_x__h231;
  tUInt64 DEF_p_next___1__h291;
  tUInt64 DEF__theResult____h216;
  tUInt64 DEF_p_next__h289;
  tUInt64 DEF_IF_dut_p_BITS_1_TO_0_EQ_0b10_THEN_IF_dut_p_BIT_ETC___d12;
  tUInt8 DEF_pr__h214;
  tUInt64 DEF__read__h56;
  tUInt64 DEF__read__h89;
  DEF_x__h1711 = INST_dut_p.METH_read();
  DEF__read__h89 = INST_dut_m_neg.METH_read();
  DEF__read__h56 = INST_dut_m_pos.METH_read();
  DEF__read__h196 = INST_dut_i.METH_read();
  DEF_pr__h214 = (tUInt8)((tUInt8)3u & DEF_x__h1711);
  DEF_p_next___1__h291 = 8589934591llu & (DEF_x__h1711 + DEF__read__h56);
  DEF__theResult____h216 = DEF_pr__h214 == (tUInt8)1u ? DEF_p_next___1__h291 : DEF_x__h1711;
  DEF_p_next__h289 = 8589934591llu & (DEF__theResult____h216 + DEF__read__h89);
  switch (DEF_pr__h214) {
  case (tUInt8)2u:
    DEF_IF_dut_p_BITS_1_TO_0_EQ_0b10_THEN_IF_dut_p_BIT_ETC___d12 = DEF_p_next__h289;
    break;
  case (tUInt8)1u:
    DEF_IF_dut_p_BITS_1_TO_0_EQ_0b10_THEN_IF_dut_p_BIT_ETC___d12 = DEF_p_next___1__h291;
    break;
  default:
    DEF_IF_dut_p_BITS_1_TO_0_EQ_0b10_THEN_IF_dut_p_BIT_ETC___d12 = DEF_x__h1711;
  }
  DEF_x__h231 = primShiftRA64(33u,
			      33u,
			      (tUInt64)(DEF_IF_dut_p_BITS_1_TO_0_EQ_0b10_THEN_IF_dut_p_BIT_ETC___d12),
			      32u,
			      1u);
  DEF_x__h300 = (tUInt8)31u & (DEF__read__h196 + (tUInt8)1u);
  INST_dut_p.METH_write(DEF_x__h231);
  INST_dut_i.METH_write(DEF_x__h300);
}

void MOD_mkTbEx7b::RL_tb_randomA_every()
{
  tUInt32 DEF_new_value__h812;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h770 = rand32();
  DEF_new_value__h812 = (tUInt32)(65535u & DEF_v__h770);
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h812);
}

void MOD_mkTbEx7b::RL_tb_randomA_every_1()
{
  DEF_x_wget__h713 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d19 = INST_tb_randomA_zaz.METH_whas();
  DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21 = DEF_x_wget__h713;
  DEF_v__h844 = DEF_tb_randomA_zaz_whas____d19 ? DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21 : 0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h844);
}

void MOD_mkTbEx7b::RL_tb_randomB_every()
{
  tUInt32 DEF_new_value__h1189;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1147 = rand32();
  DEF_new_value__h1189 = (tUInt32)(65535u & DEF_v__h1147);
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1189);
}

void MOD_mkTbEx7b::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1090 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1220 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1090 : 0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1220);
}

void MOD_mkTbEx7b::RL_tb_feed()
{
  tUInt32 DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d47;
  tUInt64 DEF_x__h1525;
  tUInt64 DEF_x__h1560;
  tUInt64 DEF_x__h1586;
  tUInt32 DEF_x__h1610;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46;
  DEF_x__h1629 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h1090 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h713 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d19 = INST_tb_randomA_zaz.METH_whas();
  DEF_v__h1220 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1090 : 0u;
  DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21 = DEF_x_wget__h713;
  DEF_v__h844 = DEF_tb_randomA_zaz_whas____d19 ? DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21 : 0u;
  DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30 = DEF_v__h844 == 32768u;
  DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31 = DEF_v__h1220 == 32768u;
  DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46 = !DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30 && !DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31;
  DEF_x__h1610 = DEF_x__h1629 + 1u;
  DEF_x__h1586 = 8589934591llu & (((((tUInt64)(0u)) << 17u) | (((tUInt64)(DEF_v__h1220)) << 1u)) | (tUInt64)((tUInt8)0u));
  DEF_x__h1525 = 8589934591llu & ((((tUInt64)(DEF_v__h844)) << 17u) | (tUInt64)(0u));
  DEF_x__h1560 = 8589934591llu & ((((tUInt64)(DEF_tb_randomA_zaz_whas____d19 ? 65535u & -DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21 : 0u)) << 17u) | (tUInt64)(0u));
  DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d47 = (DEF_v__h844 << 16u) | DEF_v__h1220;
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d47);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46)
    INST_dut_busy.METH_write((tUInt8)1u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46)
    INST_dut_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46)
    INST_dut_m_pos.METH_write(DEF_x__h1525);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46)
    INST_dut_m_neg.METH_write(DEF_x__h1560);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46)
    INST_dut_p.METH_write(DEF_x__h1586);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_rando_ETC___d46)
    INST_tb_feed_count.METH_write(DEF_x__h1610);
}

void MOD_mkTbEx7b::RL_tb_read()
{
  tUInt8 DEF_NOT_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_f_ETC___d73;
  tUInt32 DEF_signed_tb_operands_fifo_first__2_BITS_15_TO_0_5___d71;
  tUInt32 DEF_signed_tb_operands_fifo_first__2_BITS_31_TO_16_3___d70;
  tUInt32 DEF_signed_dut_p_BITS_32_TO_1_1___d72;
  tUInt32 DEF_signed_SEXT_tb_operands_fifo_first__2_BITS_31_ETC___d74;
  tUInt8 DEF_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_fifo__ETC___d69;
  tUInt32 DEF_x__h2042;
  tUInt32 DEF_tb_operands_fifo_first____d62;
  tUInt32 DEF_b__h1649;
  tUInt32 DEF_a__h1648;
  tUInt32 DEF_v__h1673;
  tUInt32 DEF_expected__h1717;
  DEF_x__h2166 = INST_tb_read_count.METH_read();
  DEF_x__h1711 = INST_dut_p.METH_read();
  DEF_v__h1673 = (tUInt32)(DEF_x__h1711 >> 1u);
  DEF_tb_operands_fifo_first____d62 = INST_tb_operands_fifo.METH_first();
  DEF_a__h1648 = (tUInt32)(DEF_tb_operands_fifo_first____d62 >> 16u);
  DEF_b__h1649 = (tUInt32)(65535u & DEF_tb_operands_fifo_first____d62);
  DEF_expected__h1717 = (tUInt32)(((tUInt64)(primSignExt32(32u,
							   16u,
							   (tUInt32)(DEF_a__h1648)))) * ((tUInt64)(primSignExt32(32u,
														 16u,
														 (tUInt32)(DEF_b__h1649)))));
  DEF_x__h2042 = DEF_x__h2166 + 1u;
  DEF_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_fifo__ETC___d69 = DEF_v__h1673 == DEF_expected__h1717;
  DEF_signed_SEXT_tb_operands_fifo_first__2_BITS_31_ETC___d74 = DEF_expected__h1717;
  DEF_signed_dut_p_BITS_32_TO_1_1___d72 = DEF_v__h1673;
  DEF_signed_tb_operands_fifo_first__2_BITS_31_TO_16_3___d70 = DEF_a__h1648;
  DEF_signed_tb_operands_fifo_first__2_BITS_15_TO_0_5___d71 = DEF_b__h1649;
  INST_tb_operands_fifo.METH_deq();
  DEF_NOT_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_f_ETC___d73 = !DEF_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_fifo__ETC___d69;
  INST_dut_busy.METH_write((tUInt8)0u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_fifo__ETC___d69)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h2166);
    if (DEF_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_fifo__ETC___d69)
      dollar_display(sim_hdl,
		     this,
		     "s,-16,-16,-32",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__2_BITS_31_TO_16_3___d70,
		     DEF_signed_tb_operands_fifo_first__2_BITS_15_TO_0_5___d71,
		     DEF_signed_dut_p_BITS_32_TO_1_1___d72);
    if (DEF_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_fifo__ETC___d69)
      dollar_display(sim_hdl,
		     this,
		     "s,16,16,32",
		     &__str_literal_3,
		     DEF_a__h1648,
		     DEF_b__h1649,
		     DEF_v__h1673);
    if (DEF_NOT_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_f_ETC___d73)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h2166);
    if (DEF_NOT_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_f_ETC___d73)
      dollar_display(sim_hdl,
		     this,
		     "s,-16,-16,-32,-32",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__2_BITS_31_TO_16_3___d70,
		     DEF_signed_tb_operands_fifo_first__2_BITS_15_TO_0_5___d71,
		     DEF_signed_dut_p_BITS_32_TO_1_1___d72,
		     DEF_signed_SEXT_tb_operands_fifo_first__2_BITS_31_ETC___d74);
    if (DEF_NOT_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_f_ETC___d73)
      dollar_display(sim_hdl,
		     this,
		     "s,16,16,32,32",
		     &__str_literal_6,
		     DEF_a__h1648,
		     DEF_b__h1649,
		     DEF_v__h1673,
		     DEF_expected__h1717);
    if (DEF_NOT_dut_p_BITS_32_TO_1_1_EQ_SEXT_tb_operands_f_ETC___d73)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h2042);
}

void MOD_mkTbEx7b::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h2395;
  tUInt8 DEF_tb_cycle_6_EQ_0___d77;
  tUInt8 DEF_tb_cycle_6_EQ_16384___d78;
  tUInt32 DEF_x__h2399;
  DEF_x__h2166 = INST_tb_read_count.METH_read();
  DEF_x__h2399 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_6_EQ_16384___d78 = DEF_x__h2399 == 16384u;
  DEF_tb_cycle_6_EQ_0___d77 = DEF_x__h2399 == 0u;
  DEF_tb_read_count_5_EQ_128___d56 = DEF_x__h2166 == 128u;
  DEF_x__h2395 = DEF_x__h2399 + 1u;
  if (DEF_tb_cycle_6_EQ_0___d77)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_6_EQ_0___d77)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_5_EQ_128___d56)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h2166, DEF_x__h2399);
    if (DEF_tb_read_count_5_EQ_128___d56)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_6_EQ_16384___d78)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_6_EQ_16384___d78)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h2395);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx7b::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
  INST_dut_p.reset_RST(ARG_rst_in);
  INST_dut_m_pos.reset_RST(ARG_rst_in);
  INST_dut_m_neg.reset_RST(ARG_rst_in);
  INST_dut_i.reset_RST(ARG_rst_in);
  INST_dut_busy.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx7b::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx7b::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dut_busy.dump_state(indent + 2u);
  INST_dut_i.dump_state(indent + 2u);
  INST_dut_m_neg.dump_state(indent + 2u);
  INST_dut_m_pos.dump_state(indent + 2u);
  INST_dut_p.dump_state(indent + 2u);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx7b::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 47u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_dut_booth_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_booth_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h196", 5u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_randomA_zaz_whas____d19", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_5_EQ_128___d56", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1147", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1220", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h770", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h844", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1629", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1711", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2166", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1090", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h713", 16u);
  num = INST_dut_busy.dump_VCD_defs(num);
  num = INST_dut_i.dump_VCD_defs(num);
  num = INST_dut_m_neg.dump_VCD_defs(num);
  num = INST_dut_m_pos.dump_VCD_defs(num);
  num = INST_dut_p.dump_VCD_defs(num);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx7b::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx7b &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx7b::vcd_defs(tVCDDumpType dt, MOD_mkTbEx7b &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 5u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_dut_booth_step) != DEF_CAN_FIRE_RL_dut_booth_step)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_dut_booth_step, 1u);
	backing.DEF_CAN_FIRE_RL_dut_booth_step = DEF_CAN_FIRE_RL_dut_booth_step;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30) != DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30 = DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21) != DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21, 16u);
	backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21 = DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31) != DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31 = DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_booth_step) != DEF_WILL_FIRE_RL_dut_booth_step)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_booth_step, 1u);
	backing.DEF_WILL_FIRE_RL_dut_booth_step = DEF_WILL_FIRE_RL_dut_booth_step;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF__read__h196) != DEF__read__h196)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h196, 5u);
	backing.DEF__read__h196 = DEF__read__h196;
      }
      ++num;
      if ((backing.DEF_tb_randomA_zaz_whas____d19) != DEF_tb_randomA_zaz_whas____d19)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_randomA_zaz_whas____d19, 1u);
	backing.DEF_tb_randomA_zaz_whas____d19 = DEF_tb_randomA_zaz_whas____d19;
      }
      ++num;
      if ((backing.DEF_tb_read_count_5_EQ_128___d56) != DEF_tb_read_count_5_EQ_128___d56)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_5_EQ_128___d56, 1u);
	backing.DEF_tb_read_count_5_EQ_128___d56 = DEF_tb_read_count_5_EQ_128___d56;
      }
      ++num;
      if ((backing.DEF_v__h1147) != DEF_v__h1147)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1147, 32u);
	backing.DEF_v__h1147 = DEF_v__h1147;
      }
      ++num;
      if ((backing.DEF_v__h1220) != DEF_v__h1220)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1220, 16u);
	backing.DEF_v__h1220 = DEF_v__h1220;
      }
      ++num;
      if ((backing.DEF_v__h770) != DEF_v__h770)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h770, 32u);
	backing.DEF_v__h770 = DEF_v__h770;
      }
      ++num;
      if ((backing.DEF_v__h844) != DEF_v__h844)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h844, 16u);
	backing.DEF_v__h844 = DEF_v__h844;
      }
      ++num;
      if ((backing.DEF_x__h1629) != DEF_x__h1629)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1629, 32u);
	backing.DEF_x__h1629 = DEF_x__h1629;
      }
      ++num;
      if ((backing.DEF_x__h1711) != DEF_x__h1711)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1711, 33u);
	backing.DEF_x__h1711 = DEF_x__h1711;
      }
      ++num;
      if ((backing.DEF_x__h2166) != DEF_x__h2166)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2166, 32u);
	backing.DEF_x__h2166 = DEF_x__h2166;
      }
      ++num;
      if ((backing.DEF_x_wget__h1090) != DEF_x_wget__h1090)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1090, 16u);
	backing.DEF_x_wget__h1090 = DEF_x_wget__h1090;
      }
      ++num;
      if ((backing.DEF_x_wget__h713) != DEF_x_wget__h713)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h713, 16u);
	backing.DEF_x_wget__h713 = DEF_x_wget__h713;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_dut_booth_step, 1u);
      backing.DEF_CAN_FIRE_RL_dut_booth_step = DEF_CAN_FIRE_RL_dut_booth_step;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30 = DEF_IF_tb_randomA_zaz_whas__9_THEN_IF_tb_randomA_z_ETC___d30;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21, 16u);
      backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21 = DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d21;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31 = DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d31;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_booth_step, 1u);
      backing.DEF_WILL_FIRE_RL_dut_booth_step = DEF_WILL_FIRE_RL_dut_booth_step;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF__read__h196, 5u);
      backing.DEF__read__h196 = DEF__read__h196;
      vcd_write_val(sim_hdl, num++, DEF_tb_randomA_zaz_whas____d19, 1u);
      backing.DEF_tb_randomA_zaz_whas____d19 = DEF_tb_randomA_zaz_whas____d19;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_5_EQ_128___d56, 1u);
      backing.DEF_tb_read_count_5_EQ_128___d56 = DEF_tb_read_count_5_EQ_128___d56;
      vcd_write_val(sim_hdl, num++, DEF_v__h1147, 32u);
      backing.DEF_v__h1147 = DEF_v__h1147;
      vcd_write_val(sim_hdl, num++, DEF_v__h1220, 16u);
      backing.DEF_v__h1220 = DEF_v__h1220;
      vcd_write_val(sim_hdl, num++, DEF_v__h770, 32u);
      backing.DEF_v__h770 = DEF_v__h770;
      vcd_write_val(sim_hdl, num++, DEF_v__h844, 16u);
      backing.DEF_v__h844 = DEF_v__h844;
      vcd_write_val(sim_hdl, num++, DEF_x__h1629, 32u);
      backing.DEF_x__h1629 = DEF_x__h1629;
      vcd_write_val(sim_hdl, num++, DEF_x__h1711, 33u);
      backing.DEF_x__h1711 = DEF_x__h1711;
      vcd_write_val(sim_hdl, num++, DEF_x__h2166, 32u);
      backing.DEF_x__h2166 = DEF_x__h2166;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1090, 16u);
      backing.DEF_x_wget__h1090 = DEF_x_wget__h1090;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h713, 16u);
      backing.DEF_x_wget__h713 = DEF_x_wget__h713;
    }
}

void MOD_mkTbEx7b::vcd_prims(tVCDDumpType dt, MOD_mkTbEx7b &backing)
{
  INST_dut_busy.dump_VCD(dt, backing.INST_dut_busy);
  INST_dut_i.dump_VCD(dt, backing.INST_dut_i);
  INST_dut_m_neg.dump_VCD(dt, backing.INST_dut_m_neg);
  INST_dut_m_pos.dump_VCD(dt, backing.INST_dut_m_pos);
  INST_dut_p.dump_VCD(dt, backing.INST_dut_p);
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
}
