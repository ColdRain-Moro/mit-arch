/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Sun Jan 28 09:02:40 UTC 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx5.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_3("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_6("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_4("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_7("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_5("FAILED case %0d", 15u);
static std::string const __str_literal_9("FAILED due to cycle limit", 25u);
static std::string const __str_literal_8("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_2("PASSED case %0d", 15u);
static std::string const __str_literal_1("i: %0d, product: %0d", 20u);


/* Constructor */
MOD_mkTbEx5::MOD_mkTbEx5(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dut_a_reg(simHdl, "dut_a_reg", this, 16u, 0u, (tUInt8)0u),
    INST_dut_b_reg(simHdl, "dut_b_reg", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_busy(simHdl, "dut_busy", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_i(simHdl, "dut_i", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_product(simHdl, "dut_product", this, 16u, 0u, (tUInt8)0u),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 16u, 4u, (tUInt8)1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 8u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 8u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1190(2863311530u),
    DEF_v__h813(2863311530u)
{
  symbol_count = 46u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx5::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_dut_mul_step", SYM_DEF, &DEF_CAN_FIRE_RL_dut_mul_step, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u], "dut_a_reg", SYM_MODULE, &INST_dut_a_reg);
  init_symbol(&symbols[9u], "dut_b_reg", SYM_MODULE, &INST_dut_b_reg);
  init_symbol(&symbols[10u], "dut_busy", SYM_MODULE, &INST_dut_busy);
  init_symbol(&symbols[11u], "dut_i", SYM_MODULE, &INST_dut_i);
  init_symbol(&symbols[12u], "dut_product", SYM_MODULE, &INST_dut_product);
  init_symbol(&symbols[13u], "RL_dut_mul_step", SYM_RULE);
  init_symbol(&symbols[14u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[16u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[17u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[18u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[19u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[20u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[21u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[22u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[23u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[24u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[25u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[26u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[27u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[28u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[29u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[30u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[31u], "v__h1263", SYM_DEF, &DEF_v__h1263, 8u);
  init_symbol(&symbols[32u], "v__h887", SYM_DEF, &DEF_v__h887, 8u);
  init_symbol(&symbols[33u],
	      "WILL_FIRE_RL_dut_mul_step",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_mul_step,
	      1u);
  init_symbol(&symbols[34u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[40u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[41u], "x__h1668", SYM_DEF, &DEF_x__h1668, 32u);
  init_symbol(&symbols[42u], "x__h2521", SYM_DEF, &DEF_x__h2521, 32u);
  init_symbol(&symbols[43u], "x__h278", SYM_DEF, &DEF_x__h278, 4u);
  init_symbol(&symbols[44u], "x_wget__h1133", SYM_DEF, &DEF_x_wget__h1133, 8u);
  init_symbol(&symbols[45u], "x_wget__h756", SYM_DEF, &DEF_x_wget__h756, 8u);
}


/* Rule actions */

void MOD_mkTbEx5::RL_dut_mul_step()
{
  tUInt8 DEF_x__h335;
  tUInt32 DEF_dut_product_PLUS_IF_dut_b_reg_BIT_dut_i_BITS_2_ETC___d10;
  tUInt8 DEF_dut_i_BITS_2_TO_0___d5;
  tUInt8 DEF_bs__h255;
  tUInt32 DEF_b__h275;
  tUInt32 DEF_unsigned_dut_product___d11;
  DEF_v__h1712 = INST_dut_product.METH_read();
  DEF_unsigned_dut_product___d11 = DEF_v__h1712;
  DEF_b__h275 = INST_dut_a_reg.METH_read();
  DEF_bs__h255 = INST_dut_b_reg.METH_read();
  DEF_x__h278 = INST_dut_i.METH_read();
  DEF_dut_i_BITS_2_TO_0___d5 = (tUInt8)((tUInt8)7u & DEF_x__h278);
  DEF_dut_product_PLUS_IF_dut_b_reg_BIT_dut_i_BITS_2_ETC___d10 = 65535u & (DEF_v__h1712 + (primExtract8(1u,
													8u,
													(tUInt8)(DEF_bs__h255),
													3u,
													(tUInt8)(DEF_dut_i_BITS_2_TO_0___d5),
													3u,
													(tUInt8)(DEF_dut_i_BITS_2_TO_0___d5)) ? primShiftL32(16u,
																			     16u,
																			     (tUInt32)(DEF_b__h275),
																			     4u,
																			     (tUInt8)(DEF_x__h278)) : 0u));
  DEF_x__h335 = (tUInt8)15u & (DEF_x__h278 + (tUInt8)1u);
  INST_dut_product.METH_write(DEF_dut_product_PLUS_IF_dut_b_reg_BIT_dut_i_BITS_2_ETC___d10);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,4,16",
		   &__str_literal_1,
		   DEF_x__h278,
		   DEF_unsigned_dut_product___d11);
  INST_dut_i.METH_write(DEF_x__h335);
}

void MOD_mkTbEx5::RL_tb_randomA_every()
{
  tUInt8 DEF_new_value__h855;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h813 = rand32();
  DEF_new_value__h855 = (tUInt8)((tUInt8)255u & DEF_v__h813);
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h855);
}

void MOD_mkTbEx5::RL_tb_randomA_every_1()
{
  DEF_x_wget__h756 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h887 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h756 : (tUInt8)0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h887);
}

void MOD_mkTbEx5::RL_tb_randomB_every()
{
  tUInt8 DEF_new_value__h1232;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1190 = rand32();
  DEF_new_value__h1232 = (tUInt8)((tUInt8)255u & DEF_v__h1190);
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1232);
}

void MOD_mkTbEx5::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1133 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1263 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1133 : (tUInt8)0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1263);
}

void MOD_mkTbEx5::RL_tb_feed()
{
  tUInt32 DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d44;
  tUInt32 DEF__0_CONCAT_IF_tb_randomA_zaz_whas__7_THEN_tb_ran_ETC___d45;
  tUInt32 DEF_x__h1649;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43;
  DEF_x__h1668 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h1133 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h756 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h887 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h756 : (tUInt8)0u;
  DEF_v__h1263 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1133 : (tUInt8)0u;
  DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27 = DEF_v__h887 == (tUInt8)128u;
  DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28 = DEF_v__h1263 == (tUInt8)128u;
  DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43 = !DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27 && !DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28;
  DEF_x__h1649 = DEF_x__h1668 + 1u;
  DEF__0_CONCAT_IF_tb_randomA_zaz_whas__7_THEN_tb_ran_ETC___d45 = 65535u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_v__h887));
  DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d44 = 65535u & ((((tUInt32)(DEF_v__h887)) << 8u) | (tUInt32)(DEF_v__h1263));
  if (DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d44);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43)
    INST_dut_a_reg.METH_write(DEF__0_CONCAT_IF_tb_randomA_zaz_whas__7_THEN_tb_ran_ETC___d45);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43)
    INST_dut_b_reg.METH_write(DEF_v__h1263);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43)
    INST_dut_busy.METH_write((tUInt8)1u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43)
    INST_dut_product.METH_write(0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43)
    INST_dut_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA__ETC___d43)
    INST_tb_feed_count.METH_write(DEF_x__h1649);
}

void MOD_mkTbEx5::RL_tb_read()
{
  tUInt32 DEF_x__h2397;
  tUInt8 DEF_NOT_dut_product_EQ_IF_tb_operands_fifo_first___ETC___d92;
  tUInt32 DEF_tb_operands_fifo_first____d54;
  tUInt8 DEF_a__h1687;
  tUInt8 DEF_signed_tb_operands_fifo_first__4_BITS_15_TO_8_6___d88;
  tUInt8 DEF_b__h1688;
  tUInt8 DEF_signed_tb_operands_fifo_first__4_BITS_7_TO_0_9___d90;
  tUInt32 DEF_signed_dut_product___d91;
  tUInt32 DEF_expected__h1753;
  tUInt32 DEF_signed_IF_tb_operands_fifo_first__4_BIT_0_5_T_ETC___d93;
  tUInt8 DEF_dut_product_EQ_IF_tb_operands_fifo_first__4_BI_ETC___d87;
  DEF_v__h1712 = INST_dut_product.METH_read();
  DEF_signed_dut_product___d91 = DEF_v__h1712;
  DEF_x__h2521 = INST_tb_read_count.METH_read();
  DEF_tb_operands_fifo_first____d54 = INST_tb_operands_fifo.METH_first();
  DEF_b__h1688 = (tUInt8)((tUInt8)255u & DEF_tb_operands_fifo_first____d54);
  DEF_signed_tb_operands_fifo_first__4_BITS_7_TO_0_9___d90 = DEF_b__h1688;
  DEF_a__h1687 = (tUInt8)(DEF_tb_operands_fifo_first____d54 >> 8u);
  DEF_expected__h1753 = 65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & ((65535u & (((tUInt8)((tUInt8)1u & DEF_tb_operands_fifo_first____d54) ? 65535u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h1687)) : 0u) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d54 >> 1u)) ? 65535u & (((((tUInt32)((tUInt8)0u)) << 9u) | (((tUInt32)(DEF_a__h1687)) << 1u)) | (tUInt32)((tUInt8)0u)) : 0u))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d54 >> 2u)) ? 65535u & (((((tUInt32)((tUInt8)0u)) << 10u) | (((tUInt32)(DEF_a__h1687)) << 2u)) | (tUInt32)((tUInt8)0u)) : 0u))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d54 >> 3u)) ? 65535u & (((((tUInt32)((tUInt8)0u)) << 11u) | (((tUInt32)(DEF_a__h1687)) << 3u)) | (tUInt32)((tUInt8)0u)) : 0u))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d54 >> 4u)) ? 65535u & (((((tUInt32)((tUInt8)0u)) << 12u) | (((tUInt32)(DEF_a__h1687)) << 4u)) | (tUInt32)((tUInt8)0u)) : 0u))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d54 >> 5u)) ? 65535u & (((((tUInt32)((tUInt8)0u)) << 13u) | (((tUInt32)(DEF_a__h1687)) << 5u)) | (tUInt32)((tUInt8)0u)) : 0u))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d54 >> 6u)) ? 65535u & (((((tUInt32)((tUInt8)0u)) << 14u) | (((tUInt32)(DEF_a__h1687)) << 6u)) | (tUInt32)((tUInt8)0u)) : 0u))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d54 >> 7u)) ? 65535u & (((((tUInt32)((tUInt8)0u)) << 15u) | (((tUInt32)(DEF_a__h1687)) << 7u)) | (tUInt32)((tUInt8)0u)) : 0u));
  DEF_dut_product_EQ_IF_tb_operands_fifo_first__4_BI_ETC___d87 = DEF_v__h1712 == DEF_expected__h1753;
  DEF_signed_IF_tb_operands_fifo_first__4_BIT_0_5_T_ETC___d93 = DEF_expected__h1753;
  DEF_signed_tb_operands_fifo_first__4_BITS_15_TO_8_6___d88 = DEF_a__h1687;
  DEF_NOT_dut_product_EQ_IF_tb_operands_fifo_first___ETC___d92 = !DEF_dut_product_EQ_IF_tb_operands_fifo_first__4_BI_ETC___d87;
  DEF_x__h2397 = DEF_x__h2521 + 1u;
  INST_dut_busy.METH_write((tUInt8)0u);
  INST_tb_operands_fifo.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_dut_product_EQ_IF_tb_operands_fifo_first__4_BI_ETC___d87)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_2, DEF_x__h2521);
    if (DEF_dut_product_EQ_IF_tb_operands_fifo_first__4_BI_ETC___d87)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16",
		     &__str_literal_3,
		     DEF_signed_tb_operands_fifo_first__4_BITS_15_TO_8_6___d88,
		     DEF_signed_tb_operands_fifo_first__4_BITS_7_TO_0_9___d90,
		     DEF_signed_dut_product___d91);
    if (DEF_dut_product_EQ_IF_tb_operands_fifo_first__4_BI_ETC___d87)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16",
		     &__str_literal_4,
		     DEF_a__h1687,
		     DEF_b__h1688,
		     DEF_v__h1712);
    if (DEF_NOT_dut_product_EQ_IF_tb_operands_fifo_first___ETC___d92)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_5, DEF_x__h2521);
    if (DEF_NOT_dut_product_EQ_IF_tb_operands_fifo_first___ETC___d92)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16,-16",
		     &__str_literal_6,
		     DEF_signed_tb_operands_fifo_first__4_BITS_15_TO_8_6___d88,
		     DEF_signed_tb_operands_fifo_first__4_BITS_7_TO_0_9___d90,
		     DEF_signed_dut_product___d91,
		     DEF_signed_IF_tb_operands_fifo_first__4_BIT_0_5_T_ETC___d93);
    if (DEF_NOT_dut_product_EQ_IF_tb_operands_fifo_first___ETC___d92)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16,16",
		     &__str_literal_7,
		     DEF_a__h1687,
		     DEF_b__h1688,
		     DEF_v__h1712,
		     DEF_expected__h1753);
    if (DEF_NOT_dut_product_EQ_IF_tb_operands_fifo_first___ETC___d92)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h2397);
}

void MOD_mkTbEx5::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h2750;
  tUInt8 DEF_tb_cycle_5_EQ_0___d96;
  tUInt8 DEF_tb_cycle_5_EQ_16384___d97;
  tUInt32 DEF_x__h2754;
  DEF_x__h2521 = INST_tb_read_count.METH_read();
  DEF_x__h2754 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_5_EQ_16384___d97 = DEF_x__h2754 == 16384u;
  DEF_tb_cycle_5_EQ_0___d96 = DEF_x__h2754 == 0u;
  DEF_tb_read_count_8_EQ_128___d49 = DEF_x__h2521 == 128u;
  DEF_x__h2750 = DEF_x__h2754 + 1u;
  if (DEF_tb_cycle_5_EQ_0___d96)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_5_EQ_0___d96)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_8_EQ_128___d49)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_8, DEF_x__h2521, DEF_x__h2754);
    if (DEF_tb_read_count_8_EQ_128___d49)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_5_EQ_16384___d97)
      dollar_display(sim_hdl, this, "s", &__str_literal_9);
    if (DEF_tb_cycle_5_EQ_16384___d97)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h2750);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx5::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
  INST_dut_product.reset_RST(ARG_rst_in);
  INST_dut_i.reset_RST(ARG_rst_in);
  INST_dut_busy.reset_RST(ARG_rst_in);
  INST_dut_b_reg.reset_RST(ARG_rst_in);
  INST_dut_a_reg.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx5::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx5::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dut_a_reg.dump_state(indent + 2u);
  INST_dut_b_reg.dump_state(indent + 2u);
  INST_dut_busy.dump_state(indent + 2u);
  INST_dut_i.dump_state(indent + 2u);
  INST_dut_product.dump_state(indent + 2u);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx5::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 45u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_dut_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_8_EQ_128___d49", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1190", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1263", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1712", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h813", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h887", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1668", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2521", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h278", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1133", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h756", 8u);
  num = INST_dut_a_reg.dump_VCD_defs(num);
  num = INST_dut_b_reg.dump_VCD_defs(num);
  num = INST_dut_busy.dump_VCD_defs(num);
  num = INST_dut_i.dump_VCD_defs(num);
  num = INST_dut_product.dump_VCD_defs(num);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx5::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx5 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx5::vcd_defs(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_dut_mul_step) != DEF_CAN_FIRE_RL_dut_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_dut_mul_step, 1u);
	backing.DEF_CAN_FIRE_RL_dut_mul_step = DEF_CAN_FIRE_RL_dut_mul_step;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27) != DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27 = DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28) != DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28 = DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_mul_step) != DEF_WILL_FIRE_RL_dut_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_mul_step, 1u);
	backing.DEF_WILL_FIRE_RL_dut_mul_step = DEF_WILL_FIRE_RL_dut_mul_step;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_tb_read_count_8_EQ_128___d49) != DEF_tb_read_count_8_EQ_128___d49)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_8_EQ_128___d49, 1u);
	backing.DEF_tb_read_count_8_EQ_128___d49 = DEF_tb_read_count_8_EQ_128___d49;
      }
      ++num;
      if ((backing.DEF_v__h1190) != DEF_v__h1190)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1190, 32u);
	backing.DEF_v__h1190 = DEF_v__h1190;
      }
      ++num;
      if ((backing.DEF_v__h1263) != DEF_v__h1263)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1263, 8u);
	backing.DEF_v__h1263 = DEF_v__h1263;
      }
      ++num;
      if ((backing.DEF_v__h1712) != DEF_v__h1712)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1712, 16u);
	backing.DEF_v__h1712 = DEF_v__h1712;
      }
      ++num;
      if ((backing.DEF_v__h813) != DEF_v__h813)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h813, 32u);
	backing.DEF_v__h813 = DEF_v__h813;
      }
      ++num;
      if ((backing.DEF_v__h887) != DEF_v__h887)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h887, 8u);
	backing.DEF_v__h887 = DEF_v__h887;
      }
      ++num;
      if ((backing.DEF_x__h1668) != DEF_x__h1668)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1668, 32u);
	backing.DEF_x__h1668 = DEF_x__h1668;
      }
      ++num;
      if ((backing.DEF_x__h2521) != DEF_x__h2521)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2521, 32u);
	backing.DEF_x__h2521 = DEF_x__h2521;
      }
      ++num;
      if ((backing.DEF_x__h278) != DEF_x__h278)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h278, 4u);
	backing.DEF_x__h278 = DEF_x__h278;
      }
      ++num;
      if ((backing.DEF_x_wget__h1133) != DEF_x_wget__h1133)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1133, 8u);
	backing.DEF_x_wget__h1133 = DEF_x_wget__h1133;
      }
      ++num;
      if ((backing.DEF_x_wget__h756) != DEF_x_wget__h756)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h756, 8u);
	backing.DEF_x_wget__h756 = DEF_x_wget__h756;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_dut_mul_step, 1u);
      backing.DEF_CAN_FIRE_RL_dut_mul_step = DEF_CAN_FIRE_RL_dut_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27 = DEF_IF_tb_randomA_zaz_whas__7_THEN_tb_randomA_zaz__ETC___d27;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28 = DEF_IF_tb_randomB_zaz_whas__4_THEN_tb_randomB_zaz__ETC___d28;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_mul_step, 1u);
      backing.DEF_WILL_FIRE_RL_dut_mul_step = DEF_WILL_FIRE_RL_dut_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_8_EQ_128___d49, 1u);
      backing.DEF_tb_read_count_8_EQ_128___d49 = DEF_tb_read_count_8_EQ_128___d49;
      vcd_write_val(sim_hdl, num++, DEF_v__h1190, 32u);
      backing.DEF_v__h1190 = DEF_v__h1190;
      vcd_write_val(sim_hdl, num++, DEF_v__h1263, 8u);
      backing.DEF_v__h1263 = DEF_v__h1263;
      vcd_write_val(sim_hdl, num++, DEF_v__h1712, 16u);
      backing.DEF_v__h1712 = DEF_v__h1712;
      vcd_write_val(sim_hdl, num++, DEF_v__h813, 32u);
      backing.DEF_v__h813 = DEF_v__h813;
      vcd_write_val(sim_hdl, num++, DEF_v__h887, 8u);
      backing.DEF_v__h887 = DEF_v__h887;
      vcd_write_val(sim_hdl, num++, DEF_x__h1668, 32u);
      backing.DEF_x__h1668 = DEF_x__h1668;
      vcd_write_val(sim_hdl, num++, DEF_x__h2521, 32u);
      backing.DEF_x__h2521 = DEF_x__h2521;
      vcd_write_val(sim_hdl, num++, DEF_x__h278, 4u);
      backing.DEF_x__h278 = DEF_x__h278;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1133, 8u);
      backing.DEF_x_wget__h1133 = DEF_x_wget__h1133;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h756, 8u);
      backing.DEF_x_wget__h756 = DEF_x_wget__h756;
    }
}

void MOD_mkTbEx5::vcd_prims(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  INST_dut_a_reg.dump_VCD(dt, backing.INST_dut_a_reg);
  INST_dut_b_reg.dump_VCD(dt, backing.INST_dut_b_reg);
  INST_dut_busy.dump_VCD(dt, backing.INST_dut_busy);
  INST_dut_i.dump_VCD(dt, backing.INST_dut_i);
  INST_dut_product.dump_VCD(dt, backing.INST_dut_product);
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
}
